#+STARTUP: entitiespretty
* ORG-NOTER (fork of a fork)
** This is a fork of the *c1-g* fork with some commits picked from *dmitrym*
   - In essence, this is close to the original *weirdNox* (Gonçalo Santos)
     version that you find on MELPA with the refactoring that *c1-g* implemented

   - djvu and epub support have also been advanced by *c1-g*, but I have not
     tested any of that code.

   - The main new feature for PDF users is 2-D precise notes, which can be
     inserted in two ways:
     1. "Select-precise": selecting text in the pdf, followed by =M-i=.  *c1-g*
        changed the position format to use the entire list returned by =edges=.
        This breaks the other way of inserting precise notes.  On *dmitrym*'s
        fork, select-precise notes auto-fill the note title with the selected
        text.  This has deleterious side effects for other note insertion methods.
     2. "Click-precise": =M-i=, followed by clicking a location on the page.
        The location recorded by =org-noter= is typically inaccurate in the
        horizontal direction.  This is something I want to fix.


   - Standard notes can also be inserted in two ways:
     1. "TAB".  Hitting tab creates a note title "Notes for page ##", where the
        page number is inserted automatically over the octothorpes.
     2. "i".  The fundamental =org-noter-insert-note=.  User types note title
        into the minibuffer.

** Note insertion desired features (WIP)
   1. The position of the precise note should be at the click (with a
      configurable horizontal offset) or at the upper-left of the selected text
      (or configurable to one of the corners or ends of the selected area).
   2. Highlighting of selected text should be a user settable configuration option
   3. For any of the note insertion methods, if there is any selected text, then
      it should be the default title.  (or there should be a configurable
      switch)
   4. Add property and/or configuration to make the arrow left or right
      pointing.

** Note logic map/table see [[pseudo code]] for a more coherent table
   1. [tTF] Is there =selected-text=? (is it more than three lines? (=quote-p=))
   2. [abc] Is the insertion command
      a. =M-i=
      b. =i=
      c. =TAB= (in which case 3 is always false)
   3. [tTF] Has the user supplied a =title= for the "Note:" prompt?
      does the title match a prior note title (=selection=)? then add
      =selected-text= to note with =title == selection=


   | 0123 | title             | body         | desired title    | desired body | arrow pos   | notes             |
   |------+-------------------+--------------+------------------+--------------+-------------+-------------------|
   | -FaF | Notes for page () | none         | OK               | OK           | horiz error | click             |
   | -FaT | text              | none         | OK               | OK           | horiz error | click             |
   | -taF | selected text     | none         | OK               | OK           | OK          | "short" selection |
   | -TaF | Notes for page () | selected txt | OK               | OK           | OK          | "long" selection  |
   | -taT | text              | none         | OK               | selected txt | OK          | "short" selection |
   | -TaT | Notes for page () | selected txt | text             | OK           | OK          | "long" selection  |
   |------+-------------------+--------------+------------------+--------------+-------------+-------------------|
   | -FbF | no action         | none         | OK               | OK           |             |                   |
   | -FbT | text              | none         | OK               | OK           |             |                   |
   | FTbF | no heading        | selected txt | Notes for page # | OK           |             |                   |
   | TTbF | no heading        | selected txt | OK               | OK           |             |                   |
   | -TbT | text              | none         | OK               | selected txt |             |                   |
   |------+-------------------+--------------+------------------+--------------+-------------+-------------------|
   | FFcF | Notes for page #  | none         | OK               | OK           |             |                   |
   | FTcF | Notes for page #  | none         | OK               | selected txt |             |                   |
   | TFcF | Notes for page #  | none         | no action        | no action    |             |                   |
   | TTcF | Notes for page #  | none         | use existing     | selected txt |             |                   |

   A posteriori, I find that there are 6 + 5 + 4 possibilities, 8 of which I
   would alter:
   | 0123 | title             | body         | desired title    | desired body | arrow pos   | notes             |
   |------+-------------------+--------------+------------------+--------------+-------------+-------------------|
   | -FaF | Notes for page () | none         | OK               | OK           | horiz error | click             |
   | -FaT | text              | none         | OK               | OK           | horiz error | click             |
   | -taT | text              | none         | OK               | selected txt | OK          | "short" selection |
   |------+-------------------+--------------+------------------+--------------+-------------+-------------------|
   | FTbF | no heading        | selected txt | Notes for page # | OK           |             |                   |
   | -TbT | text              | none         | OK               | selected txt |             |                   |
   |------+-------------------+--------------+------------------+--------------+-------------+-------------------|
   | FTcF | Notes for page #  | none         | OK               | selected txt |             |                   |
   | TFcF | Notes for page #  | none         | no action        | no action    |             |                   |
   | TTcF | Notes for page #  | none         | use existing     | selected txt |             |                   |

** design notes

*** =collection= in =org-noter-insert-note= is an alist.  would a hash be better?

*** what is org-noter--view-info-notes? (C-h o)
    org-noter--view-info-notes is a Lisp closure in ‘org-noter-core.el’.

    (org-noter--view-info-notes CL-X)

    Access slot "notes" of ‘org-noter--view-info’ struct CL-X.

      This function has a compiler macro ‘org-noter--view-info-notes--cmacro’.
      This function does not change global state, including the match data.

** pseudo code

   - =selected= \in {N:nil, S:short (<= 80 chars), L:long}.  T = S|L
   - =ins-mode= \in {G:page, P:precise, N:no-questions}      b = not P (G|N), T = G|P
   - =title=    \in {N:nil, W:new, E:existing}
     =ins-mode == no-questions= \rightarrow =title == nil= or existing
   - for =ins-mode == b=, default title is "Notes for page #"
   - for precise note, default title is "Notes for page (# y-pos . x-pos)"
   - 9 + 9 + 6 options
     | logic | class | title    | body     | action                        |
     |-------+-------+----------+----------+-------------------------------|
     | SGN   | S*N   | selected | none     |                               |
     | SPN   | S*N   | selected | none     |                               |
     | SNN   | S*N   | selected | none     |                               |
     |-------+-------+----------+----------+-------------------------------|
     | LGN   | L*N   | default  | selected |                               |
     | LPN   | L*N   | default  | selected |                               |
     | LNN   | L*N   | default  | selected |                               |
     |-------+-------+----------+----------+-------------------------------|
     | SNE   | *bE   | title    | selected | add selected to existing note |
     | SGE   | *bE   | title    | selected | add selected to existing note |
     | LNE   | *bE   | title    | selected | add selected to existing note |
     | LGE   | *bE   | title    | selected | add selected to existing note |
     | NNE   | *bE   | title    | none     | focus on existing note        |
     | NGE   | *bE   | title    | none     | focus on existing note        |
     |-------+-------+----------+----------+-------------------------------|
     | SPE   | *PE   | title    | selected | create new precise note       |
     | LPE   | *PE   | title    | selected | create new precies note       |
     | NPE   | *PE   | title    | none     | create new precise note       |
     |-------+-------+----------+----------+-------------------------------|
     | SGW   | *TW   | title    | selected |                               |
     | SPW   | *TW   | title    | selected |                               |
     | LGW   | *TW   | title    | selected |                               |
     | LPW   | *TW   | title    | selected |                               |
     | NGW   | *TW   | title    | none     |                               |
     | NPW   | *TW   | title    | none     |                               |
     |-------+-------+----------+----------+-------------------------------|
     | NNN   | N**   | default  | none     | creates new note              |
     | NPN   | N**   | default  | none     | creates new note              |
     | NGN   | N**   | -        | -        | exit, focus on doc            |
     |-------+-------+----------+----------+-------------------------------|

#+begin_src emacs-lisp
    (let (selected-text selected-text-short note-title precise-info location selection)
      ;; `note-title' is not the same as in org-noter-core.  It is intended to
      ;; be the title given at the prompt (or nil when  `org-noter-insert-note-no-questions' is t)
      (cond

       ;; if the `selected-text' is "short" and there is no `note-title',
       ;; then make a new note with `selected-text' as `title'
        ((and selected-text-short (not note-title))
         (setq title selected-text))

        ;; if the `selected-text' is long, no title is specified
        ;; then use the default title and quote the text
        ((and selected-text (not note-title))
         (setq title default)
         (org-noter--quote-text selected-text))

        ;; if the note is not "precise" and the title is a `selection' of existing note titles
        ;; then quote `selected-text' in the note
        ((and (not precise-info) selection)
         (org-noter--navigate-to-existing-title)
         (org-noter--quote-text selected-text)) ; nil `selected-text' will do nothing and return nil

        ;; if the note is precise AND a selection, make a new note
        ;; if the note has a new title, make a new note
        ;; in both cases, quote the `selected-text', if there is any
        ((or (and precise-info selection)
             (and (not no-questions) note-title (not selection)))
         (setq title note-title) ; same as `selection', but we are making a new note
         (org-noter--quote-text selected-text))

        ;; no `selected-text', no `note-title'
        ;; create new note if it is "precise" or "no-question" using default
        ((and (not selected-text)
              (or precise-info no-questions))
         (setq title default))

        ;; last case -- note started, but no selection or title
        ;; take no action
        (t
         (org-noter--quit-insert-note))))
#+end_src

*** org- functions/variables in org-noter-insert-note (excluding org-noter-*)
    - org-element-contents ??
    - org-element-map
    - org-element-property
    - org-element-all-elements (var)
    - org-element-type
    - org-at-heading-p
    - (org-N-empty-lines-before-current 3)
    - (org-overview)


*** vars in org-noter-insert-note

**** ast                                                            :element:

***** contents                                                      :element:
      used to determine argument to =goto-char= in =selection nil=,
      =reference-element-cons nil= if branches [[reference-element-cons]]

      This returns the first ~end~ of a ~section~ in the tree.
      #+begin_src emacs-lisp
        (org-element-map contents 'section
          (lambda (section) (org-element-property :end section))
          nil ;info
          t  ; first-match
          org-element-all-elements) ;no-recursion
      #+end_src

***** level                                                         :integer:

**** view-info                                                      :element:
     defined in top =let*=
     ~location~ is a (pdf) document location, not a text buffer location
     #+begin_src emacs-lisp
       (org-noter--get-view-info (org-noter--get-current-view) location)
     #+end_src
***** reference-element-cons                                        :element:
      defined in a let
      #+begin_src emacs-lisp
        (org-noter--view-info-reference-for-insertion view-info)
      #+end_src
*** org-noter functions to understand
**** org-noter--get-view-info
     "Return VIEW related information.

     When optional NEW-LOCATION is provided, it will be used to find
     the best heading to serve as a reference to create the new one
     relative to."

     location is used in the call to define [[view-info]]
**** org-noter--get-current-view
     "Return a vector with the current view information."

     example ~[paged 76]~
     runs =org-noter--get-current-view-hook=
     used to set [[view-info]]
**** org-noter--view-info-reference-for-insertion
     used in [[reference-element-cons]]
***** help documentation
      org-noter--view-info-reference-for-insertion is a Lisp closure in
      ‘org-noter-core.el’.

      (org-noter--view-info-reference-for-insertion CL-X)

      Access slot ~reference-for-insertion~ of =org-noter--view-info= struct CL-X.

      This function has a compiler macro ‘org-noter--view-info-reference-for-insertion--cmacro’.
      This function does not change global state, including the match data.

** Bugs to fix
   1. Navigation of nested notes is spotty. =C-M-p= and =C-M-.= have trouble
      detecting nested notes.
